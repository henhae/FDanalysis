function fit_models = loadFDfitmodels()

fit_models = ...
    fitmodelDef('ID', 'cubic'...
    ,'Function', {'x','x.^3'}...
    ,'Coefficients', {'k','K'}...
    ,'CoeffUnits', {'N/m', 'Pa/m'}...
    ,'Category', 'Membrane Indentation'...
    ...,'Parameters', {'R_hole', 'r_tip'} ...
    ...,'ParameterDescription', [paramVals.f_radius*1e-6, paramVals.f_thick*1e-9]';
    ... inputdims = {'m', 'm'}'
    , 'YName', 'F', 'YUnit', 'N', 'XUnit', 'm'...
    );
fit_models(end).name = 'cubic';
fit_models(end).description = 'Cubic fit. (approximation for membranes with pre-stress)';

               
%fit_models(end).ID = 'cubic_w_corr';
%fit_models(end).name = 'cubic with correction';
%fit_models(end).description = 'Cubic fit with log correction factor and Poission number (approximation for membranes with pre-stress)';


fit_models(end+1) = ...
    fitmodelDef('ID', 'SolMem_PointIndent_A'...
    ,'Category', 'Membrane Indentation/Solid Membrane',...
        'Function', @(sigma, E, d, R, x) membraneIndent_pointIndent_const_N_d(x, sigma, E, d, R), ...
        'ParameterDescription',{'Prestress','3D Elastic modulus', 'film thickness', 'hole radius'},...
        'ParameterUnits', {'N/m', 'Pa', 'm', 'm'},...
        'ParameterLBounds', [0 0 0 0],...
        'YName', 'F' ,'XUnit', 'm', 'YUnit', 'N'...
        );
fit_models(end).name = 'Solid Membrane Point-like indenter (a)';
fit_models(end).description = 'Indentation of Solid Membrane with pre-tension, point-like indenter, const. stress bound. cond.';


fit_models(end+1) = ...
    fitmodelDef('ID', 'SolMem_PointIndent_B',...
    'Category', 'Membrane Indentation/Solid Membrane',...
        'Function',@(sigma, E, d, R, psn, x) membraneIndent_pointIndent_const_u_d(x, sigma, E, d, R, psn), ...
        'ParameterDescription',{'Prestress','3D Elastic modulus', 'film thickness', 'hole radius', 'Poisson number'},...
        'ParameterUnits', {'N/m', 'Pa', 'm', 'm', ''},...
        'ParameterLBounds', [0 0 0 0 0],...
        'YName', 'F' ,'XUnit', 'm', 'YUnit', 'N'...
        );
fit_models(end).name = 'Solid Membrane Point-like indenter (b)';
fit_models(end).description = 'Indentation of Solid Membrane with pre-tension, point-like indenter, const. strain bound. cond.';


fitmodelDef('ID', 'SolMem_SpheIndent_A',...
    'Category', 'Membrane Indentation/Solid Membrane',...
        'Function', @(sigma, E, d, R, r, x) membraneIndent_circIndent_const_N_d(x, sigma, E, d, R, r), ...
        'ParameterDescription',{'Prestress','3D Elastic modulus', 'film thickness', 'hole radius', 'tip radius'},...
        'ParameterUnits', {'N/m', 'Pa', 'm', 'm', 'm'},...
        'ParameterLBounds', [0 0 0 0 0],...
        'YName', 'F' ,'XUnit', 'm', 'YUnit', 'N'...
        );
fit_models(end).name = 'Solid Membrane spherical indenter';
fit_models(end).description = 'Indentation of Solid Membrane with pre-tension, spherical indenter, const. stress bound. cond.';

fit_models(end+1) = ...
    fitmodelDef('ID', 'FluidMem_SpheIndent',...
    'Category', 'Membrane Indentation/Fluid Membrane',...
        'Function',@(sigma, R, r, x) FluidMembraneIndent.Spherical_F(x, sigma, r, R), ...
        'ParameterDescription',{'Prestress', 'hole radius', 'tip radius'},...
        'ParameterUnits', {'N/m', 'm', 'm'},...
        'ParameterLBounds', [0 0 0],...
        'YName', 'F' ,'XUnit', 'm', 'YUnit', 'N'...
        );
fit_models(end).name = 'Fluid membrane spherical indenter';
fit_models(end).description = 'Indentation of Fluid membrane without elasticity, spherical indenter';


fit_models(end+1) = ...
    fitmodelDef('ID', 'FluidElasMem_SpheIndent',...
    'Category', 'Membrane Indentation/Fluid Membrane',...
        'Function',@(sigma, E, d, R, r, x) FluidMembraneIndent.Spherical_FE(x, E*d, sigma, r, R), ...
        'ParameterDescription',{'Prestress','3D Elastic modulus', 'film thickness', 'hole radius', 'tip radius'},...
        'ParameterUnits', {'N/m', 'Pa', 'm', 'm', 'm'},...
        'ParameterLBounds', [0 0 0 0 0],...
        'YName', 'F' ,'XUnit', 'm', 'YUnit', 'N'...
        );
fit_models(end).name = 'Fluid elastic membrane spherical indenter';
fit_models(end).description = 'Fluid membrane with tension and elasticity, spherical indenter';


fit_models(end+1) = ...
    fitmodelDef('ID', 'FluidMem_CylIndent',...
        'Category', 'Membrane Indentation/Fluid Membrane',...
        'Function',@(sigma, R, r, x) FluidMembraneIndent.Cylindrical_F(x, sigma, r, R), ...
        'ParameterDescription',{'Prestress', 'hole radius', 'tip radius'},...
        'ParameterUnits', {'N/m', 'm', 'm'},...
        'ParameterLBounds', [0 0 0],...
        'YName', 'F' ,'XUnit', 'm', 'YUnit', 'N'...
        );
fit_models(end).name = 'Fluid membrane cylindrical indenter';
fit_models(end).description = 'Fluid membrane without elasticity, cylindrical indenter';


fit_models(end+1) = ...
    fitmodelDef('ID', 'FluidElasMem_CylIndent',...
        'Category', 'Membrane Indentation/Fluid Membrane',...
        'Function',@(sigma, E, d, R, r, x) FluidMembraneIndent.Cylindrical_FE(x, E*d, sigma, r, R), ...
        'ParameterDescription',{'Prestress','3D Elastic modulus', 'film thickness', 'hole radius', 'tip radius'},...
        'ParameterUnits', {'N/m', 'Pa', 'm', 'm', 'm'},...
        'ParameterLBounds', [0 0 0 0 0],...
        'YName', 'F' ,'XUnit', 'm', 'YUnit', 'N'...
        );
fit_models(end).name = 'Fluid elastic membrane cylindrical indenter';
fit_models(end).description = 'Fluid membrane with tension and elasticity, cylindrical indenter';

fit_models(end+1) = ...
    fitmodelDef('ID', 'FluidMem_ConicIndent',...
        'Category', 'Membrane Indentation/Fluid Membrane',...
        'Function',@(sigma, R, alpha, x) FluidMembraneIndent.Conical_F(x, sigma, alpha/180*pi, R), ...
        'ParameterDescription',{'Prestress', 'hole radius', 'tip angle'},...
        'ParameterUnits', {'N/m', 'm', 'deg'},...
        'ParameterLBounds', [0 0 0],...
        'YName', 'F' ,'XUnit', 'm', 'YUnit', 'N'...
        );
fit_models(end).name = 'Fluid membrane conical indenter';
fit_models(end).description = 'Fluid membrane without elasticity, conical indenter';

fit_models(end+1) = ...
    fitmodelDef('ID', 'FluidElasMem_ConicIndent',...
        'Category', 'Membrane Indentation/Fluid Membrane',...
        'Function',@(sigma, E, d, R, alpha, x) FluidMembraneIndent.Conical_FE(x, E*d, sigma, alpha/180*pi, R), ...
        'ParameterDescription',{'Prestress','3D Elastic modulus', 'film thickness', 'hole radius', 'tip angle'},...
        'ParameterUnits', {'N/m', 'Pa', 'm', 'm', 'deg'},...
        'ParameterLBounds', [0 0 0 0 0],...
        'YName', 'F' ,'XUnit', 'm', 'YUnit', 'N'...
        );
fit_models(end).name = 'Fluid elastic membrane conical indenter';
fit_models(end).description = 'Fluid membrane with tension and elasticity, conical indenter';

fit_models(end+1) = ...
    fitmodelDef('ID', 'NonLinTest',...
    'Name', 'Cubic Nonlin-test', 'Description', 'Test model for a simple cubic model fitted as nonlinear model.',...
    'Function', @(k, K, x) k.*x + K*x.^3,...
    'YName', 'F' ,'XUnit', 'm', 'YUnit', 'N',...
    'ParameterUnits', {'N/m', 'Pa/m'},...
    'ParameterLBounds', [0 0]...
    );

fit_models(end+1) = ...
    fitmodelDef('ID', 'DMT',...
        'Category', 'Indentation',...
        'Name', 'DMT model for tip indentation',...
        'Description', 'DMT model for tip indentation, used for soft contact',...
        'Function',@(F_a, E, nu, r, x) 4/3*E./(1-nu^2).*sqrt(r)*x.^(3/2)+F_a, ...
        'ParameterDescription',{'Adhesion force','3D Elastic modulus', 'Poisson number', 'tip radius'},...
        'ParameterUnits', {'N', 'Pa', '', 'm'},...
        'ParameterLBounds', [0 0 0 0],...
        'YName', 'F' ,'XUnit', 'm', 'YUnit', 'N'...
        );
end